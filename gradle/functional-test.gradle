sourceSets {
    functionalTest {
        java.srcDir file('src/functionalTest/java')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    dependsOn assemble
    mustRunAfter test
    systemProperty 'distribution.dir', bootJar.destinationDirectory.get().asFile.absolutePath
    systemProperty 'archive.name', bootJar.archiveFileName.get()
}

check.dependsOn functionalTest

dependencies {
    functionalTestImplementation 'com.squareup.okhttp3:okhttp:3.11.0'
    def testcontainersVersion = '1.12.0'
    functionalTestImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
    functionalTestImplementation "org.testcontainers:postgresql:$testcontainersVersion"
}